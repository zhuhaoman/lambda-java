package com.zhuhaoman.java8.stream;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Stream;

import static java.util.Comparator.comparing;
import static java.util.stream.Collectors.toList;

/**
 * @ClassName StreamTest
 * @Description
 * @Author zhuhaoman
 * @Date 2019/1/30 17:30
 **/
@RunWith(SpringRunner.class)
@SpringBootTest
public class StreamTest {
    @Test
    public void test() {
        List<Dish> menu = Arrays.asList(
            new Dish("pork", false, 800, Dish.Type.MEAT),
            new Dish("beef", false, 700, Dish.Type.MEAT),
            new Dish("chicken", false, 400, Dish.Type.MEAT),
            new Dish("french fries", true, 530, Dish.Type.OTHER),
            new Dish("rice", true, 350, Dish.Type.OTHER),
            new Dish("season fruit", true, 120, Dish.Type.OTHER),
            new Dish("pizza", true, 550, Dish.Type.OTHER),
            new Dish("prawns", false, 300, Dish.Type.FISH),
            new Dish("salmon", false, 450, Dish.Type.FISH)
        );

        List<String> treeHigh = menu.stream()
                .filter(d -> d.getCalories() > 300)
                .map(Dish::getName)
                .limit(3)
                .collect(toList());
        System.out.println(treeHigh);


        List<String> title = Arrays.asList("java8","in","action");
        Stream<String> s = title.stream();
        s.forEach(System.out::println);

        List<String> lowCaloric = menu.parallelStream()
                .filter(d -> d.getCalories() < 400)
                .sorted(comparing(Dish::getCalories))
                .map(Dish::getName)
                .collect(toList());
        lowCaloric.forEach(System.out::println);

        List<String> names = menu.stream()
                .filter(d->{
                    System.out.println(d.getName());
                    return d.getCalories() > 300;
                }).map(name ->{
                    System.out.println("mapping:"+name.getName());
                    return name.getName();
                }).limit(3)
                .collect(toList());
        System.out.println(names);
    }
   @Test
    public void test1() {

        //构造函数

        //无参
        Supplier<Apple> a = Apple::new;
        Apple apple1 = a.get();
        System.out.println(apple1.toString());

        //一个参数
        Function<String,Apple> a1 = Apple::new;
        Apple apple2 = a1.apply("red");
        System.out.println(apple2.toString());

        //两个参数
        BiFunction<String,Integer,Apple> a2 = Apple::new;
        Apple apple3 = a2.apply("green",123);
        System.out.println(apple3.toString());
    }

    @Test
    public void test2() {
        Apple apple = getFruit("red",120);
        System.out.println(apple.toString());
    }
}
